create database if not exists simplegui1;

use simplegui1;

create table if not exists customers
(
    id          int auto_increment
        primary key,
    name        varchar(45)          not null,
    phoneNumber varchar(11)          not null,
    email       varchar(320)         not null,
    is_deleted  tinyint(1) default 0 not null
);

create table if not exists orders
(
    id          int auto_increment
        primary key,
    customer_id int                  not null,
    totalPrice  float      default 0 not null,
    is_deleted  tinyint(1) default 0 not null,
    constraint orders_ibfk_1
        foreign key (customer_id) references customers (id)
);

create index  customer_id
    on orders (customer_id);

create table if not exists products
(
    id         int auto_increment
        primary key,
    name       varchar(45)          not null,
    price      float                not null,
    quantity   int                  not null,
    is_deleted tinyint(1) default 0 not null
);

create table if not exists orderitems
(
    order_id   int   not null,
    product_id int   not null,
    quantity   int   not null,
    unitPrice  float not null,
    totalPrice float as ((`unitPrice` * `quantity`)),
    primary key (order_id, product_id),
    constraint orderitems_ibfk_1
        foreign key (order_id) references orders (id),
    constraint orderitems_ibfk_2
        foreign key (product_id) references products (id)
);

create index order_id
    on orderitems (order_id);

create index product_id
    on orderitems (product_id);

DELIMITER $
create definer = root@localhost trigger adjust_quantity_af_update
    after update
    on orderitems
    for each row
BEGIN
    DECLARE qty_diff INT;
    SET qty_diff = NEW.quantity - OLD.quantity;

    UPDATE products
    SET quantity = quantity - qty_diff
    WHERE id = NEW.product_id;
END;

create definer = root@localhost trigger check_quantity_bf_insert
    before insert
    on orderitems
    for each row
begin
    DECLARE stock_quantity int;
    SELECT products.quantity INTO stock_quantity FROM products WHERE products.id = NEW.product_id;

    IF NEW.quantity > stock_quantity THEN
        SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = 'Quantity higher than available stock';
    END IF;
end;

create definer = root@localhost trigger check_quantity_bf_update
    before update
    on orderitems
    for each row
begin
    DECLARE stock_quantity int;
    SELECT products.quantity
    INTO stock_quantity
    FROM products
    WHERE products.id = NEW.product_id;

    IF NEW.quantity > OLD.quantity THEN
        IF (NEW.quantity - OLD.quantity) > stock_quantity THEN
            SIGNAL SQLSTATE '45001'
                SET MESSAGE_TEXT = 'Quantity higher than available stock';
        END IF;
    END IF;

    IF NEW.quantity < 0 THEN
        SIGNAL SQLSTATE '45002'
            SET MESSAGE_TEXT = 'Cannot reduce order item quantity below zero';
    END IF;
end;

create definer = root@localhost trigger reduce_quantity_af_insert
    after insert
    on orderitems
    for each row
BEGIN
    UPDATE products
    SET quantity = quantity - NEW.quantity
    WHERE id = NEW.product_id;
END;

create definer = root@localhost trigger restore_quantity_af_delete
    after delete
    on orderitems
    for each row
BEGIN
    UPDATE products
    SET quantity = quantity + OLD.quantity
    WHERE id = OLD.product_id;
END;

create definer = root@localhost trigger update_total_af_price
    after insert
    on orderitems
    for each row
BEGIN
    UPDATE orders
SET totalPrice = (
    SELECT IFNULL(SUM(orderitems.totalPrice), 0)
    FROM orderItems
    WHERE orderItems.order_id = NEW.order_id
)
WHERE orders.id = NEW.order_id;
END;

create definer = root@localhost trigger update_total_price_af_delete
    after delete
    on orderitems
    for each row
BEGIN
    UPDATE orders
    SET totalPrice = (
        SELECT IFNULL(SUM(orderitems.totalPrice), 0)
        FROM orderItems
        WHERE orderItems.order_id = OLD.order_id
    )
    WHERE orders.id = OLD.order_id;
END;

create definer = root@localhost trigger update_total_price_af_update
    after update
    on orderitems
    for each row
BEGIN
    UPDATE orders
    SET totalPrice = (
        SELECT IFNULL(SUM(orderitems.totalPrice), 0)
        FROM orderItems
        WHERE orderItems.order_id = NEW.order_id
    )
    WHERE orders.id = NEW.order_id;
END;

DELIMITER ;
